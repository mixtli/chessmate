grammar PGN
  rule database
    game+
    new_line?
  end

  rule game
    tag_section new_line space? comment:comment? movetext_section new_line*
  end

  rule tag_section
    tag_pair*
  end

  rule tag_pair
    '[' tag_name [\s]+ tag_value ']' new_line
  end

  rule tag_name
    [a-zA-Z0-9]+
  end

  rule tag_value
    ('"' tval:[^"]* '"') 
  end


  rule comment
    '{' ctxt:[^}]* '}' space? {
      def text_value
        ctxt.text_value
      end
    }

  end

  rule movetext_section
    mvs:move* space? game_termination? new_line* {
      def moves
        mvs.elements
      end
    }
  end

  #rule move_sequence
  #  move* 
  #end

  #rule move_sequence
  #  (move space move_sequence) | (recursive_variation move_sequence) | aborted | empty
  #end

  rule move
    (move_number_indication space)? san_move   nannotations:numeric_annotation* space? comment:comment? vars:(variation:recursive_variation space?)* {
      def numeric_annotations
        nannotations.elements.map {|n| n.value }
      end
      def variations
        vars.elements.map {|v| v.variation}
      end
      def value
        san_move.text_value
      end
    }
  end

  rule numeric_annotation
    space numeric_annotation_glyph {
      def value
         numeric_annotation_glyph.value 
      end
    }
  end

  rule aborted
    '*'
  end

  rule recursive_variation
    '(' space? comment? mvs:move* space? ')' {
      def moves
        mvs.elements
      end
    }
  end

  rule game_termination
    '1-0' / '0-1' / '1/2-1/2' / '*'
  end

  rule empty
    ''
  end

  rule move_number_indication
    [\d]+ [\.]+
  end
  rule san_move
    (([KQNRB]? (capture_move / normal_move )) / 'O-O-O' / 'O-O' / '--') ('=' [QRBN])? '+'? '#'? 
  end

  rule capture_move
    ( [a-h1-8] 'x' [a-h] [\d] ) / ('x' [a-h] [\d])
  end

  rule normal_move
    ( [a-h1-8] [a-h] [\d] ) / ( [a-h] [\d])
  end

  rule promotion
    '=' [QRBN]
  end
  rule check
    '+'
  end
  rule checkmate
    '#'
  end
  rule numeric_annotation_glyph
    '$' number:[\d]* {
      def value
        number.text_value.to_i
      end
    }
  end
  rule new_line
    [\r]? [\n]
  end
  rule space
    [\s]+
  end
end

